/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import kotlin.test.Test
import kotlin.test.assertFailsWith
import kotlin.test.assertNotNull

class AppTest {
    @Test fun robotExist() {
        val robot = Robot(Direction.EAST, 10, -10)
        assertNotNull(robot, "Robot should be instantiated" )
    }

    @Test fun robotOutOfBoundsX() {
        assertFailsWith<IllegalArgumentException> {
            Robot(Direction.EAST, 200, -10)
        }
    }

    @Test fun testToString() {
        val robot = Robot(Direction.EAST, 10, -10)
        val str = robot.toString()
        assert(str == "Robot(direction=EAST, x=10, y=-10)")
    }

    @Test fun testGetters() {
        val robot = Robot(Direction.NORTH, 10, -10)
        assert(robot.getDirection() == Direction.NORTH)
        assert(robot.getX() == 10)
        assert(robot.getY() == -10)
    }


    @Test fun testAllDirections() {
        val north = Robot(Direction.NORTH, 0, 0)
        val east = Robot(Direction.EAST, 0, 0)
        val south = Robot(Direction.SOUTH, 0, 0)
        val west = Robot(Direction.WEST, 0, 0)

        assert(north.getDirection() == Direction.NORTH)
        assert(east.getDirection() == Direction.EAST)
        assert(south.getDirection() == Direction.SOUTH)
        assert(west.getDirection() == Direction.WEST)
    }


    @Test fun turnLeftFromWest() {
        val robot = Robot(Direction.WEST, 0, 0)
        robot.turn("L")
        assert(robot.getDirection() == Direction.SOUTH)
    }

    @Test fun turnLeftFromSouth() {
        val robot = Robot(Direction.SOUTH, 0, 0)
        robot.turn("L")
        assert(robot.getDirection() == Direction.EAST)
    }

    @Test fun turnLeftFromEast() {
        val robot = Robot(Direction.EAST, 0, 0)
        robot.turn("L")
        assert(robot.getDirection() == Direction.NORTH)
    }

    @Test fun turnLeftFromNorth() {
        val robot = Robot(Direction.NORTH, 0, 0)
        robot.turn("L")
        assert(robot.getDirection() == Direction.WEST)
    }


    @Test fun turnRightFromWest() {
        val robot = Robot(Direction.WEST, 0, 0)
        robot.turn("R")
        assert(robot.getDirection() == Direction.NORTH)
    }

    @Test fun turnRightFromNorth() {
        val robot = Robot(Direction.NORTH, 0, 0)
        robot.turn("R")
        assert(robot.getDirection() == Direction.EAST)
    }

    @Test fun turnRightFromSouth() {
        val robot = Robot(Direction.SOUTH, 0, 0)
        robot.turn("R")
        assert(robot.getDirection() == Direction.WEST)
    }

    @Test fun turnRightFromEast() {
        val robot = Robot(Direction.EAST, 0, 0)
        robot.turn("R")
        assert(robot.getDirection() == Direction.SOUTH)
    }


    @Test fun advance() {
        val robot = Robot(Direction.NORTH, 0, 0)
        robot.advance()
        assert(robot.getY() == 1)
    }


    @Test fun handleCommandTurnLeft() {
        val robot = Robot(Direction.NORTH, 0, 0)
        robot.handleCommand("L")
        assert(robot.getDirection() == Direction.WEST)
    }

    @Test fun handleCommandTurnRight() {
        val robot = Robot(Direction.NORTH, 0, 0)
        robot.handleCommand("R")
        assert(robot.getDirection() == Direction.EAST)
    }

    @Test fun handleCommandAdvance() {
        val robot = Robot(Direction.NORTH, 0, 0)
        robot.handleCommand("A")
        assert(robot.getY() == 1)
    }

    @Test fun robotFactoryGenerateRobots() {
        val robots = RobotFactory.randomizedRobot()
        assertNotNull(robots)
        assert(robots.size == 25)
    }

}
